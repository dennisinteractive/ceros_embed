<?php

/**
 * Implements hook_help().
 */
function ceros_embed_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ceros_embed':
      $output = '<p>' . t('The Ceros Embed module allows Ceros to be embedded on nodes.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_info().
 */
function ceros_embed_field_info() {
  return array(
    'ceros_embed' => array(
      'label' => t('Ceros Embed'),
      'description' => t('Allows Ceros to be embedded on nodes.'),
      'settings' => array(
        'max_length' => '',
      ),
      'instance_settings' => array(
        'text_processing' => 0,
      ),
      'default_widget' => 'ceros_embed',
      'default_formatter' => 'ceros_embed',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function ceros_embed_field_widget_info() {
  return array(
    'ceros_embed' => array(
      'label' => t('Ceros Embed'),
      'field types' => array(
        'ceros_embed',
      ),
      'settings' => array(
        'rows' => 5,
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function ceros_embed_field_formatter_info() {
  return array(
    'ceros_embed' => array(
      'label' => t('Ceros Embed'),
      'field types' => array(
        'ceros_embed',
      ),
      'settings' => array(
        'replace_node_content' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function ceros_embed_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'ceros_embed':
      $element['value'] = array(
        '#type' => 'textarea',
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : '',
        '#delta' => $delta,
        '#element_validate' => array(
          'ceros_embed_ceros_embed_field_validate'
        ),
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ceros_embed_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  switch ($instance['widget']['type']) {
    case 'ceros_embed':
      $element['replace_node_content'] = array(
        '#type' => 'checkbox',
        '#title' => t('Replace node content'),
        '#description' => t('Replaces other fields on the display.'),
        '#default_value' => $settings['replace_node_content'],
        '#multiple' => FALSE,
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function ceros_embed_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  switch ($instance['widget']['type']) {
    case 'ceros_embed':
      $summary = !empty($settings['replace_node_content']) ?  'Replace node content' : 'Default';
      break;
  }

  return $summary;
}

/**
 * Implements hook_field_is_empty().
 */
function ceros_embed_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Callback for ceros_embed validation.
 */
function ceros_embed_ceros_embed_field_validate($element, &$form_state) {
  if (!empty($element['#value'])) {
    $value = strip_tags($element['#value'], '<div><iframe>');
    form_set_value($element, $value, $form_state);
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function ceros_embed_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array('settings' => $display['settings']);
  switch ($display['type']) {
    case 'ceros_embed':
      $element['#attached']['js'] = array(
        '//view.ceros.com/scroll-proxy.min.js' => array(
          'type' => 'external',
          'scope' => 'footer',
          'attributes' => array(
            'async' => 'async',
          ),
        ),
      );
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => $item['value'],
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_page_alter().
 */
function ceros_embed_page_alter(&$page) {
  if (!$node = menu_get_object()) {
    return;
  }
  if (!isset($page['content']['system_main']['nodes'][$node->nid])) {
    return;
  }
  $node_content = $page['content']['system_main']['nodes'][$node->nid];
  foreach ($node_content as $field_name => $field) {
    if (is_array($field) && isset($field['#field_type']) && $field['#field_type'] == 'ceros_embed') {
      if (isset($field['settings']['replace_node_content']) && $field['settings']['replace_node_content'] === 1) {
        $page['content']['ceros_embed'] = $field;
        unset($page['content']['system_main']['nodes'][$node->nid]);
      }
    }
  }
}
